
==================== FINAL INTERFACE ====================
2017-01-14 19:18:04.284909 UTC

interface main@main:Main 8001
  interface hash: 0c1ed7351a7d0a7f8c1e78d11910dbb2
  ABI hash: fb103fdf7c023a8fa0afb3fa51e8d4af
  export-list hash: 3a3276ebc526d88e9c9281b97510826d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ca778c7262f7c7c3b3b8642d920c4403
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.evaluate
  Main.filterHist
  Main.history
  Main.inspect
  Main.interpreterLoop
  Main.main
  Main.newNum
  Main.nextLine
  Main.now
  Main.prevLine
  Main.printHist
  Main.readProgram
  Main.LineNumber
module dependencies: InterpreterBase
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Control.Monad.IO.Class d702028d883e700bd7066b031147030d
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.IORef 4b625b2df7d0ef688ec068837f79c7b0
import  -/  base-4.9.0.0:Data.Traversable 7ce5b7ee67475ac3d03ae825b86efd9f
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.IORef c27b760cf1b1851f9cf1a1693e335fa5
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 8f3eaf1368a7ea27857993e3febae6a3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8d095ad71634b5551ba5dc1307b7f9e5
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  InterpreterBase 37343360963f1a048d176f7a50215fc5
  exports: d4cd489e9f6774b4d08ec09af5474d30
  Env 187ef4416b1d0843f60060ad5aecc5ad
  Eval a2505d8e51410d423c58a8c3bbcedd06
  Nil cf096aeb6bcb0338ce0eb82d24eec1cb
  Run 7179c1a4697f8d3567743641643fe965
  Statement 6b26f8f294e163d060e2be5f9fa2db8e
  Val 5e7340a510e45b31cc3f53b486d00489
  exec 1a00f9f76b3024859b08e0c4e51524f4
  lookup fc3e46cb71f7d33787a657b0c07649d3
  runEval d6196b9d4d5cb48181bbfe5b49b3f060
  runRun 387394ba1532eba07e1518d48459d7b9
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Except 99ba8f4995df0e7f2f512551a0ca666a
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Identity d5df288a645143a1a126ce2ea9106b82
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader 859b39f57eb3bed457106c30aac21473
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader.Class a2c7beb266585be238cfe9f5989c52b7
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.State d851912d62cbc95e043a9cc13c3581de
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Trans 0a058c68d8234a5f23a0f2e61a261faf
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Writer 57defc881a9014c3d1c218e1b5d9eb02
eb0ad23f3651fb6c188008c5f097445b
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
8cdf71ce7f092e88568e3edec82cd97e
  $wnextLine ::
    GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MutVar#
                            GHC.Prim.RealWorld (GHC.Types.Int, GHC.Types.Int))
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.Types.Int, GHC.Types.Int)
                        ww
                        w of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) nowN limit ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.Show.$fShowInt_$cshow nowN)
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case limit of wild1 { GHC.Types.I# x ->
                 case nowN of wild2 { GHC.Types.I# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# x1 (GHC.Prim.-# x 1#)) of wild3 {
                   GHC.Types.False
                   -> case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ (GHC.Types.Int, GHC.Types.Int)
                             ww
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ (GHC.Types.Int, GHC.Types.Int)
                             ww
                             (case ipv5 of wild4 { (,) x2 y ->
                              (case x2 of wild5 { GHC.Types.I# x3 ->
                               GHC.Types.I# (GHC.Prim.+# x3 1#) },
                               y) })
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Types.False #) } }
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.nextLine2
                             GHC.Types.True
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      (# ipv4, GHC.Types.True #) } } } } } } }) -}
362a210ccd5e64f6d3ba3bcb84a90a68
  $wprevLine ::
    GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MutVar#
                            GHC.Prim.RealWorld (GHC.Types.Int, GHC.Types.Int))
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.Types.Int, GHC.Types.Int)
                        ww
                        w of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) nowN limit ->
                 case nowN of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT
                   -> case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ (GHC.Types.Int, GHC.Types.Int)
                             ww
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ (GHC.Types.Int, GHC.Types.Int)
                             ww
                             (Main.prevLine3 ipv3)
                             ipv2 of s2# { DEFAULT ->
                      (# s2#, GHC.Types.False #) } }
                   0#
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.prevLine2
                             GHC.Types.True
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      (# ipv2, GHC.Types.True #) } } } } }) -}
3c1a9308763f4e8eb96e3f03dfa45592
  type LineNumber = GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int)
389582bad9c26852e8200bd0883be6b2
  evaluate ::
    [InterpreterBase.Statement]
    -> GHC.Types.Int -> InterpreterBase.Run ()
  {- Arity: 2, Strictness: <L,U><L,U(U)>,
     Unfolding: (\ (st :: [InterpreterBase.Statement])
                   (line :: GHC.Types.Int) ->
                 let {
                   k :: Control.Monad.Trans.State.Lazy.StateT
                          [(GHC.Types.Int, InterpreterBase.Env)]
                          (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
                          ()
                   = InterpreterBase.exec
                       (GHC.List.!! @ InterpreterBase.Statement st line)
                       line
                 } in
                 let {
                   lvl28 :: GHC.Base.String
                   = InterpreterBase.$fShowStatement_$cshowsPrec
                       GHC.Show.shows22
                       (GHC.List.!! @ InterpreterBase.Statement st line)
                       (GHC.Types.[] @ GHC.Types.Char)
                 } in
                 (\ (s1 :: [(GHC.Types.Int, InterpreterBase.Env)])
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case GHC.IO.Handle.Text.hPutStr2
                         GHC.IO.Handle.FD.stdout
                         lvl28
                         GHC.Types.True
                         s of ds { (#,#) ipv ipv1 ->
                  (k `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <[(GHC.Types.Int, InterpreterBase.Env)]>_N
                        <Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO>_R
                        <()>_N)
                     s1)
                    `cast`
                  (Trans
                       (Control.Monad.Trans.Except.N:ExceptT[0]
                            <[GHC.Types.Char]>_N
                            <GHC.Types.IO>_R
                            <((), [(GHC.Types.Int, InterpreterBase.Env)])>_N)
                       (GHC.Types.N:IO[0]
                            <Data.Either.Either
                               [GHC.Types.Char] ((), [(GHC.Types.Int, InterpreterBase.Env)])>_R))
                    ipv })
                   `cast`
                 (Trans
                      (<[(GHC.Types.Int, InterpreterBase.Env)]>_R
                       ->_R Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <Data.Either.Either
                                             [GHC.Types.Char]
                                             ((), [(GHC.Types.Int, InterpreterBase.Env)])>_R))
                                (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                          <[GHC.Types.Char]>_N
                                          <GHC.Types.IO>_R
                                          <((), [(GHC.Types.Int, InterpreterBase.Env)])>_N)))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <[(GHC.Types.Int, InterpreterBase.Env)]>_N
                                <Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO>_R
                                <()>_N)))) -}
c10d0a4600b7ff0dbfafa0aec2ce2e3c
  filterHist ::
    GHC.Types.Int
    -> [(GHC.Types.Int, InterpreterBase.Env)]
    -> [(GHC.Types.Int, InterpreterBase.Env)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (line :: GHC.Types.Int)
                   (env :: [(GHC.Types.Int, InterpreterBase.Env)]) ->
                 GHC.Base.build
                   @ (GHC.Types.Int, InterpreterBase.Env)
                   (\ @ b
                      (c :: (GHC.Types.Int, InterpreterBase.Env) -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ (GHC.Types.Int, InterpreterBase.Env)
                      @ b
                      (GHC.List.filterFB
                         @ (GHC.Types.Int, InterpreterBase.Env)
                         @ b
                         c
                         (\ (ds :: (GHC.Types.Int, InterpreterBase.Env)) ->
                          case ds of wild { (,) i ds1 -> GHC.Classes.leInt i line }))
                      n
                      env)) -}
ee027a769b2572baedc239395d3c5499
  history ::
    GHC.Base.String
    -> [(GHC.Types.Int, InterpreterBase.Env)] -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.history1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <[(GHC.Types.Int, InterpreterBase.Env)]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
21609d49d66d061ea516cf9e42d790b1
  history1 ::
    GHC.Base.String
    -> [(GHC.Types.Int, InterpreterBase.Env)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: (\ (name :: GHC.Base.String)
                   (env :: [(GHC.Types.Int, InterpreterBase.Env)])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.history2
                   name
                   (letrec {
                      go :: [(GHC.Types.Int, InterpreterBase.Env)]
                            -> [[(GHC.Types.Int, InterpreterBase.Val)]]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [(GHC.Types.Int, InterpreterBase.Env)]) ->
                        case ds of wild {
                          [] -> Main.history_z
                          : y ys
                          -> case y of wild1 { (,) i e ->
                             case Main.$slookup1 @ InterpreterBase.Val name e of wild2 {
                               GHC.Base.Nothing
                               -> let {
                                    ds1 :: (GHC.Types.Int, InterpreterBase.Val) {- Strictness: m -}
                                    = (i, InterpreterBase.Nil)
                                  } in
                                  letrec {
                                    go1 :: [[(GHC.Types.Int, InterpreterBase.Val)]]
                                           -> [[(GHC.Types.Int, InterpreterBase.Val)]]
                                      {- Arity: 1, Strictness: <S,1*U> -}
                                    = \ (ds2 :: [[(GHC.Types.Int, InterpreterBase.Val)]]) ->
                                      case ds2 of wild3 {
                                        [] -> GHC.Types.[] @ [(GHC.Types.Int, InterpreterBase.Val)]
                                        : y1 ys1
                                        -> GHC.Types.:
                                             @ [(GHC.Types.Int, InterpreterBase.Val)]
                                             (GHC.Types.:
                                                @ (GHC.Types.Int, InterpreterBase.Val)
                                                ds1
                                                y1)
                                             (go1 ys1) }
                                  } in
                                  go1 (go ys)
                               GHC.Base.Just v
                               -> let {
                                    ds1 :: (GHC.Types.Int, InterpreterBase.Val) {- Strictness: m -}
                                    = (i, v)
                                  } in
                                  letrec {
                                    go1 :: [[(GHC.Types.Int, InterpreterBase.Val)]]
                                           -> [[(GHC.Types.Int, InterpreterBase.Val)]]
                                      {- Arity: 1, Strictness: <S,1*U> -}
                                    = \ (ds2 :: [[(GHC.Types.Int, InterpreterBase.Val)]]) ->
                                      case ds2 of wild3 {
                                        [] -> GHC.Types.[] @ [(GHC.Types.Int, InterpreterBase.Val)]
                                        : y1 ys1
                                        -> GHC.Types.:
                                             @ [(GHC.Types.Int, InterpreterBase.Val)]
                                             (GHC.Types.:
                                                @ (GHC.Types.Int, InterpreterBase.Val)
                                                ds1
                                                y1)
                                             (go1 ys1) }
                                  } in
                                  go1 (go ys) } } }
                    } in
                    case go env of wild {
                      [] -> GHC.List.badHead @ [(GHC.Types.Int, InterpreterBase.Val)]
                      : x ds1 -> x })
                   eta) -}
bb2f75418504804ea1ba1827bfd55f09
  history2 ::
    GHC.Base.String
    -> [(GHC.Types.Int, InterpreterBase.Val)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><S,U>,
     Unfolding: (\ (name :: GHC.Base.String)
                   (env :: [(GHC.Types.Int, InterpreterBase.Val)])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           "History "#
                           (GHC.Base.++ @ GHC.Types.Char name Main.history4))
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 Main.history3 env ipv }) -}
3a43bdda46d294e821d3745ceda33374
  history3 ::
    [(GHC.Types.Int, InterpreterBase.Val)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
57fb5c67f39aa21cf4eb6b755021945d
  history4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ": \n"#) -}
7319404cedadadcf80a32a87889ace41
  history_z :: [[(GHC.Types.Int, InterpreterBase.Val)]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [(GHC.Types.Int, InterpreterBase.Val)]
                   (GHC.Types.[] @ (GHC.Types.Int, InterpreterBase.Val))
                   (GHC.Types.[] @ [(GHC.Types.Int, InterpreterBase.Val)])) -}
dba0aa6dd330aec803680809623d5657
  inspect ::
    GHC.Base.String -> InterpreterBase.Eval InterpreterBase.Val
  {- Arity: 2, Strictness: <S,U><S,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Main.inspect1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <Data.Map.Base.Map InterpreterBase.Name InterpreterBase.Val>_R
                               <Control.Monad.Trans.Except.ExceptT
                                  GHC.Base.String Data.Functor.Identity.Identity>_R
                               <InterpreterBase.Val>_N)) -}
da4bf05f212a8a4f70d22c8d153234db
  inspect1 ::
    GHC.Base.String
    -> Data.Map.Base.Map InterpreterBase.Name InterpreterBase.Val
    -> Control.Monad.Trans.Except.ExceptT
         GHC.Base.String Data.Functor.Identity.Identity InterpreterBase.Val
  {- Arity: 2, Strictness: <S,U><S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: Data.Map.Base.Map
                            InterpreterBase.Name InterpreterBase.Val) ->
                 case InterpreterBase.$slookup1 @ InterpreterBase.Val w w1 of wild {
                   GHC.Base.Nothing
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.Functor.Identity.Identity
                                  (Data.Either.Either [GHC.Types.Char] InterpreterBase.Val))
                             GHC.Err.errorWithoutStackTrace_wild1
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (InterpreterBase.lookup1
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                w)
                      ret_ty (Control.Monad.Trans.Except.ExceptT
                                GHC.Base.String Data.Functor.Identity.Identity InterpreterBase.Val)
                      of {}
                   GHC.Base.Just x
                   -> (Data.Either.Right @ GHC.Base.String @ InterpreterBase.Val x)
                        `cast`
                      (Trans
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either GHC.Base.String InterpreterBase.Val>_R))
                           (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                     <GHC.Base.String>_N
                                     <Data.Functor.Identity.Identity>_R
                                     <InterpreterBase.Val>_N))) }) -}
9a3dca97c63ab06876a76b55b9826fa3
  interpreterLoop ::
    [InterpreterBase.Statement]
    -> [(GHC.Types.Int, InterpreterBase.Env)]
    -> Main.LineNumber
    -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.interpreterLoop1
                  `cast`
                (<[InterpreterBase.Statement]>_R
                 ->_R <[(GHC.Types.Int, InterpreterBase.Env)]>_R
                 ->_R <Main.LineNumber>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
fa2a503b28f761300aa427ce50c2ea8c
  interpreterLoop1 ::
    [InterpreterBase.Statement]
    -> [(GHC.Types.Int, InterpreterBase.Env)]
    -> Main.LineNumber
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U)><S,U> -}
f72f9581d287d6a8eae9414103df7cbc
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
f96385ce2ec57574af729f1568401e0f
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Main.main9 s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.newMutVar#
                        @ (GHC.Types.Int, GHC.Types.Int)
                        @ GHC.Prim.RealWorld
                        (Main.main8,
                         case GHC.List.$wlenAcc
                                @ InterpreterBase.Statement
                                ipv1
                                0# of ww2 { DEFAULT ->
                         GHC.Types.I# ww2 })
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.Types.Int, GHC.Types.Int)
                        ipv3
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case ipv5 of wild { (,) nowN ds3 ->
                 case ((Main.evaluate ipv1 nowN)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <[(GHC.Types.Int, InterpreterBase.Env)]>_N
                            <Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO>_R
                            <()>_N)
                         Main.main6)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <GHC.Base.String>_N
                                <GHC.Types.IO>_R
                                <((), [(GHC.Types.Int, InterpreterBase.Env)])>_N)
                           (GHC.Types.N:IO[0]
                                <Data.Either.Either
                                   GHC.Base.String ((), [(GHC.Types.Int, InterpreterBase.Env)])>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case ipv7 of wild1 {
                   Data.Either.Left ipv8
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ ()
                        Main.main3
                        ipv6
                   Data.Either.Right ds5
                   -> case ds5 of wild2 { (,) ds6 env ->
                      case Main.interpreterLoop1
                             ipv1
                             env
                             (GHC.STRef.STRef
                                @ GHC.Prim.RealWorld
                                @ (GHC.Types.Int, GHC.Types.Int)
                                ipv3)
                               `cast`
                             (Sym (GHC.IORef.N:IORef[0]) <(GHC.Types.Int, GHC.Types.Int)>_N)
                             ipv6 of ds7 { (#,#) ipv8 ipv9 ->
                      GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main2
                        GHC.Types.True
                        ipv8 } } } } } } } }) -}
604a463d3d756a993d621364c4c572bd
  main10 ::
    Text.ParserCombinators.ReadP.P [InterpreterBase.Statement]
  {- Unfolding: (GHC.Read.$wlist
                   @ InterpreterBase.Statement
                   InterpreterBase.$fReadStatement2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InterpreterBase.Statement>_R))
                   @ [InterpreterBase.Statement]
                   (Text.Read.readEither5 @ [InterpreterBase.Statement])) -}
a113322aa79b9df1ebb596c2b7d38496
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "src/program.txt"#) -}
0948bbd1f33a2c2607bc1e717c47b500
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
65cb3a063becae7389d73df47b87f068
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DONE!"#) -}
c94a4093894203e75e0edc982acc920f
  main3 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionIOException_$ctoException
                   Main.main4) -}
ba5b914f3ea56194c37606f9b1678f5b
  main4 :: GHC.IO.Exception.IOException
  {- Unfolding: (GHC.IO.Exception.IOError
                   (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
                   GHC.IO.Exception.UserError
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main5
                   (GHC.Base.Nothing @ Foreign.C.Types.CInt)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)) -}
069f996b1183cdc07cb2d09082dbd7ec
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Pattern match failure in do expression at src/Main.hs:102:3-16"#) -}
8c222fb4335502dea1fd59653bf11dd1
  main6 :: [(GHC.Types.Int, InterpreterBase.Env)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, InterpreterBase.Env)
                   Main.main7
                   (GHC.Types.[] @ (GHC.Types.Int, InterpreterBase.Env))) -}
70c3b51223e95ff33576a78c962225c7
  main7 ::
    (GHC.Types.Int,
     Data.Map.Base.Map InterpreterBase.Name InterpreterBase.Val)
  {- HasNoCafRefs,
     Unfolding: ((Main.main8,
                  Data.Map.Base.Tip @ InterpreterBase.Name @ InterpreterBase.Val)) -}
479bfd3529558af1e2ad4b081ea1d27e
  main8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
27ba35b173abc66cd4e0befb93975e4d
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [InterpreterBase.Statement] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.main11
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    case Text.Read.readEither6
                           @ [InterpreterBase.Statement]
                           (Text.ParserCombinators.ReadP.run
                              @ [InterpreterBase.Statement]
                              Main.main10
                              ipv3) of wild {
                      []
                      -> GHC.Err.errorWithoutStackTrace
                           @ 'GHC.Types.PtrRepLifted
                           @ [InterpreterBase.Statement]
                           Text.Read.readEither4
                      : x ds
                      -> case ds of wild1 {
                           [] -> x
                           : ipv4 ipv5
                           -> GHC.Err.errorWithoutStackTrace
                                @ 'GHC.Types.PtrRepLifted
                                @ [InterpreterBase.Statement]
                                Text.Read.readEither2 } } #) } }) -}
3049f5e98d863941f993cbf2c535f014
  newNum :: GHC.Types.Int -> GHC.Types.IO Main.LineNumber
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.newNum1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int)>_R)) -}
a8a1722d29917de66dcb8fc059697bba
  newNum1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (limit :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMutVar#
                        @ (GHC.Types.Int, GHC.Types.Int)
                        @ GHC.Prim.RealWorld
                        (Main.main8, limit)
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (GHC.STRef.STRef
                       @ GHC.Prim.RealWorld
                       @ (GHC.Types.Int, GHC.Types.Int)
                       ipv1)
                      `cast`
                    (Sym (GHC.IORef.N:IORef[0]) <(GHC.Types.Int,
                                                  GHC.Types.Int)>_N) #) }) -}
5ff624fcfa2da2f6b0a36ea3563d95d6
  nextLine :: Main.LineNumber -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.nextLine1
                  `cast`
                (<Main.LineNumber>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
1a806f0e0043ab77beb8ce547b6aae40
  nextLine1 ::
    Main.LineNumber
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.LineNumber)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w `cast`
                      (GHC.IORef.N:IORef[0] <(GHC.Types.Int,
                                              GHC.Types.Int)>_N) of ww { GHC.STRef.STRef ww1 ->
                 Main.$wnextLine ww1 w1 }) -}
19c73666d368ad9aad94d212ceaa08af
  nextLine2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "End of program"#) -}
9f4bc5b2910be7c808bffe5eb0253765
  now :: Main.LineNumber -> GHC.Types.IO GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.now1
                  `cast`
                (<Main.LineNumber>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R)) -}
4f7bbf79df61c2c4e77aeb38e16a10fa
  now1 ::
    Main.LineNumber
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (num :: Main.LineNumber)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case num
                        `cast`
                      (GHC.IORef.N:IORef[0] <(GHC.Types.Int,
                                              GHC.Types.Int)>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.Types.Int, GHC.Types.Int)
                        var#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild1 { (,) nowN ds -> (# ipv, nowN #) } } }) -}
a565447ae0ae3825bdc44a1bf2c7d00a
  prevLine :: Main.LineNumber -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.prevLine1
                  `cast`
                (<Main.LineNumber>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
84bc6c683add26b348b438165ce2379b
  prevLine1 ::
    Main.LineNumber
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.LineNumber)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w `cast`
                      (GHC.IORef.N:IORef[0] <(GHC.Types.Int,
                                              GHC.Types.Int)>_N) of ww { GHC.STRef.STRef ww1 ->
                 Main.$wprevLine ww1 w1 }) -}
0db91deed3666e959f35eaa688c1df27
  prevLine2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Start of program"#) -}
c276515bfdb922f7e2e7775fb78bbebd
  prevLine3 ::
    (GHC.Types.Int, GHC.Types.Int) -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U(U),U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case ds of wild { (,) x y ->
                 (case x of wild1 { GHC.Types.I# x1 ->
                  GHC.Types.I# (GHC.Prim.-# x1 1#) },
                  y) }) -}
9429cbe050b7a6cb719e41afaa87a78b
  printHist ::
    GHC.Base.String
    -> [(GHC.Types.Int, InterpreterBase.Val)] -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.history2
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <[(GHC.Types.Int, InterpreterBase.Val)]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ab8fd650d3ee132791a47d744116838c
  readProgram :: GHC.Types.IO [InterpreterBase.Statement]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main9
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[InterpreterBase.Statement]>_R)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

